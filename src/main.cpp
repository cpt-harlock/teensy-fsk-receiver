#include <Arduino.h>
#include <arm_math.h>
/**
 * Let's try to use Teensy 4.0 as a DSP companion for ADC values read from an external device (using UART interface)
 */
#define FFT_LENGTH (512)
#define CORRELATION_LENGTH (FFT_LENGTH * 2 - 1)
#define CORRELATION_THRESHOLD (0.9)
float32_t chirpSamplesBuffer[FFT_LENGTH];
float32_t workingChirpSamplesBuffer[FFT_LENGTH];
float32_t knownChirpSamplesBuffer[FFT_LENGTH] = {
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    -0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    -0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    -0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
    0.044194,
    -0.000000,
    -0.044194,
    -0.062500,
    -0.044194,
    -0.000000,
    0.044194,
    0.062500,
};
float32_t symbolSamplesBuffer[FFT_LENGTH];
float32_t correlationBuffer[CORRELATION_LENGTH];
float32_t sample;
boolean receivingData = false;
float32_t chirpOffset;
float32_t chirpNorm;
float32_t maxCorrelationValue;
void setup()
{
  Serial.begin(38400); //reading as fast as possible
  memset(chirpSamplesBuffer, 0, sizeof(float32_t) * FFT_LENGTH);
}

void loop()
{
  if (Serial.available() >= 4)
  {
    //read float32_t as binary (4 bytes)
    //TODO: check bit ordering
    Serial.readBytes((char *)&sample, 4);
    if (receivingData)
    {
    }
    else
    {
      //receiving chirp

      // Serial.printf("Data from serial %f\r\n",sample);
      chirpOffset = 0.0;
      chirpNorm = 0.0;
      maxCorrelationValue = 0.0;
      for (size_t i = 0; i < FFT_LENGTH - 1; i++)
      {
        chirpSamplesBuffer[i] = chirpSamplesBuffer[i + 1];
        //TODO: optimize (memory puzzle)
        chirpOffset += chirpSamplesBuffer[i];
      }
      chirpSamplesBuffer[FFT_LENGTH - 1] = sample;
      chirpOffset += sample;
      chirpOffset /= FFT_LENGTH;
      //subtracting offset and  computing norm
      for (size_t i = 0; i < FFT_LENGTH; i++)
      {
        workingChirpSamplesBuffer[i] = chirpSamplesBuffer[i] - chirpOffset;
        chirpNorm += workingChirpSamplesBuffer[i] * workingChirpSamplesBuffer[i];
      }
      chirpNorm = sqrt(chirpNorm);
      //normalizing
      for (size_t i = 0; i < FFT_LENGTH; i++)
      {
        workingChirpSamplesBuffer[i] /= chirpNorm;
      }
      //correlation
      arm_correlate_f32(workingChirpSamplesBuffer, FFT_LENGTH, knownChirpSamplesBuffer, FFT_LENGTH, correlationBuffer);
      for (size_t i = 0; i < CORRELATION_LENGTH; i++)
      {
        if (correlationBuffer[i] > maxCorrelationValue)
          maxCorrelationValue = correlationBuffer[i];
      }
      Serial.printf("Max correlation %f\r\n", maxCorrelationValue);
      if (maxCorrelationValue > CORRELATION_THRESHOLD)
      {
        Serial.println("Receiving data");
        receivingData = 1;
      }
    }
  }
}